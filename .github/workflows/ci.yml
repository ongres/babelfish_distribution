name: JDBC Unit Tests
on:
  push:
    branches:
      - main
    # tags:
    #   - 'BABEL_*'
  pull_request:
    branches:
      - main


jobs:
  distribution-test:
    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        babel: [BABEL_1_0_0, BABEL_1_1_0]
        engine: [BABEL_1_0_0__PG_13_4, BABEL_1_0_0__PG_13_5]
        antlr: [4.9.2, 4.9.3]
    steps:
      # - name: Get Release Tag
      #   id: get_tag
      #   run: echo ::set-output name=VERSION::$(echo $GITHUB_REF##*/)
      - uses: actions/checkout@v2
      - name: Build base distribution for Babelfish
        run: |
          cd ..
          export EXTTAG=${{ matrix.babel }}
          export ENGTAG=${{ matrix.engine }}

          export EXTREPO=babelfish_extensions
          export ENGREPO=postgresql_modified_for_babelfish

          export EXTDIR=${EXTREPO}-${EXTTAG}
          export ENGDIR=${ENGREPO}-${ENGTAG}

          cd test
          curl -L https://github.com/babelfish-for-postgresql/${EXTREPO}/archive/refs/tags/${EXTTAG}.zip --output ${EXTTAG}.zip
          curl -L https://github.com/babelfish-for-postgresql/${ENGREPO}/archive/refs/tags/${ENGTAG}.zip --output ${ENGTAG}.zip

          unzip ${ENGTAG}.zip
          unzip ${EXTTAG}.zip

          mv ${EXTDIR}/contrib/* ${EXTDIR}/

          # [[ -d  ${EXTDIR}/contrib && ! -s ${EXTDIR}/contrib ]] && rm -fr ${EXTDIR}/contrib 
          rm -fr ${EXTDIR}/contrib 
          mv ${EXTDIR}/** ${ENGDIR}/contrib

          # Extract the Release Notes from the website
          curl https://raw.githubusercontent.com/babelfish-for-postgresql/babelfish_project_website/a9bbeb3aeb2305914ae802806df21d7b7fbd1ec9/_releases/release_notes_1.0.0.md | sed '/---/,/---/d' > ${ENGDIR}/RELEASE_NOTES.md

          sudo apt-get update
          sudo apt-get install uuid-dev openjdk-8-jre libicu-dev libxml2-dev openssl libssl-dev python-dev libossp-uuid-dev libpq-dev cmake pkg-config g++ build-essential bison 
          

      - name: Copy ANTLR jar file
        run: |
          export EXTTAG=${{ matrix.babel }}
          export ENGTAG=${{ matrix.engine }}

          export EXTREPO=babelfish_extensions
          export ENGREPO=postgresql_modified_for_babelfish

          export EXTDIR=${EXTREPO}-${EXTTAG}
          export ENGDIR=${ENGREPO}-${ENGTAG}

          cd ${ENGDIR}/contrib/babelfishpg_tsql/antlr/thirdparty/antlr/
          sudo cp antlr-${{ matrix.antlr }}-complete.jar /usr/local/lib
      - name: Compile ANTLR
        run: |
          cd ..
          wget http://www.antlr.org/download/antlr4-cpp-runtime-${{ matrix.antlr }}-source.zip
          unzip -d antlr4 antlr4-cpp-runtime-${{ matrix.antlr }}-source.zip 
          cd antlr4
          mkdir build && cd build 
          cmake .. -D ANTLR_JAR_LOCATION=/usr/local/lib/antlr-${{ matrix.antlr }}-complete.jar -DCMAKE_INSTALL_PREFIX=/usr/local -DWITH_DEMO=True
          make
          sudo make install
          cp /usr/local/lib/libantlr4-runtime.so.${{ matrix.antlr }} ~/postgres/lib/
      - name: Set env variables and build extensions
        run: |
          export EXTTAG=${{ matrix.babel }}
          export ENGTAG=${{ matrix.engine }}

          export EXTREPO=babelfish_extensions
          export ENGREPO=postgresql_modified_for_babelfish

          export EXTDIR=${EXTREPO}-${EXTTAG}
          export ENGDIR=${ENGREPO}-${ENGTAG}

          export PG_CONFIG=~/postgres/bin/pg_config
          #export PG_SRC=~/work/babelfish_extensions/postgresql_modified_for_babelfish
          export PG_SRC=~/work/

          cd ..
          # Engine dir variable ENGDIR is the engine plus all extensions in the Postgres practice.
          cd ${ENGDIR}
          ./configure --prefix=$HOME/postgres/ --with-python PYTHON=/usr/bin/python2.7 --enable-debug CFLAGS="-ggdb" --with-libxml --with-uuid=ossp --with-icu
          make -j 4 2>error.txt
          make install
          make check
          cd contrib && make && sudo make install

          export cmake=$(which cmake)
          cd ${ENGDIR}/contrib/babelfishpg_money
          make && make install
          cd ../babelfishpg_common
          make && make install
          cd ../babelfishpg_tds
          make && make install
          echo Now building bbf_tsql
          cd ../babelfishpg_tsql
          make && make install
      - name: Install extensions
        run: |
          cd ~
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get install mssql-tools unixodbc-dev
          export PATH=/opt/mssql-tools/bin:$PATH
          ~/postgres/bin/initdb -D ~/postgres/data/
          ~/postgres/bin/pg_ctl -D ~/postgres/data/ -l logfile start
          cd postgres/data
          sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" postgresql.conf
          sudo sed -i "s/#shared_preload_libraries = ''/shared_preload_libraries = 'babelfishpg_tds'/g" postgresql.conf
          ipaddress=$(ifconfig eth0 | grep 'inet ' | cut -d: -f2 | awk '{ print $2}')
          sudo echo "host    all             all             $ipaddress/32            trust" >> pg_hba.conf
          ~/postgres/bin/pg_ctl -D ~/postgres/data/ -l logfile restart
          sudo ~/postgres/bin/psql -d postgres -U runner -c "CREATE USER jdbc_user WITH SUPERUSER CREATEDB CREATEROLE PASSWORD '12345678' INHERIT;"
          sudo ~/postgres/bin/psql -d postgres -U runner -c "DROP DATABASE IF EXISTS jdbc_testdb;"
          sudo ~/postgres/bin/psql -d postgres -U runner -c "CREATE DATABASE jdbc_testdb OWNER jdbc_user;"
          sudo ~/postgres/bin/psql -d jdbc_testdb -U runner -c "set allow_system_table_mods = on;"
          sudo ~/postgres/bin/psql -d jdbc_testdb -U runner -c "CREATE EXTENSION IF NOT EXISTS "babelfishpg_tds" CASCADE;"
          sudo ~/postgres/bin/psql -d jdbc_testdb -U runner -c "GRANT ALL ON SCHEMA sys to jdbc_user;"
          sudo ~/postgres/bin/psql -d jdbc_testdb -U runner -c "ALTER USER jdbc_user CREATEDB;"
          sudo ~/postgres/bin/psql -d jdbc_testdb -U runner -c "ALTER SYSTEM SET babelfishpg_tsql.database_name = 'jdbc_testdb';"
          sudo ~/postgres/bin/psql -d jdbc_testdb -U runner -c "ALTER SYSTEM SET babelfishpg_tds.set_db_session_property = true;"
          sudo ~/postgres/bin/psql -d jdbc_testdb -U runner -c "SELECT pg_reload_conf();"
          sudo ~/postgres/bin/psql -d jdbc_testdb -U runner -c "CALL sys.initialize_babelfish('jdbc_user');"
          sqlcmd -S localhost -U jdbc_user -P 12345678 -Q "SELECT @@version GO"
      - name: Run JDBC test framework
        timeout-minutes: 15
        run: |
          cd test/JDBC/
          mvn test
      - name: Upload log
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: postgres-log
          path: ~/postgres/data/logfile
      # The test summary files contain paths with ':' characters, which is not allowed with the upload-artifact actions
      - name: Rename test summary files
        if: ${{ failure() }}
        run: |
          cd test/JDBC/Info
          timestamp=`ls -Art | tail -n 1`
          cd $timestamp
          mv $timestamp.diff ../output-diff.diff
          mv "$timestamp"_runSummary.log ../run-summary.log
      - name: Upload run summary 
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: run-summary.log
          path: test/JDBC/Info/run-summary.log
      - name: Upload output diff
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: output-diff.diff
          path: test/JDBC/Info/output-diff.diff